name: Build iOS App

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allows manual run

jobs:
  build:
    runs-on: macos-latest

    env:
      SCHEME: "Runner" # Default Flutter iOS scheme; adjust if different
      DESTINATION: "platform=iOS Simulator,name=iPhone 15,OS=latest"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.1' # Specify your Flutter version; adjust as needed
        channel: 'stable'

    - name: Cache Flutter Pub
      uses: actions/cache@v4
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-cache-

    - name: Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: List project files (for debugging)
      run: |
        echo "=== Project Structure ==="
        find . -name "*.xcodeproj" -o -name "*.xcworkspace" | head -10
        echo "=== Available schemes ==="
        if [ -f ios/Runner.xcworkspace ]; then
          xcodebuild -workspace ios/Runner.xcworkspace -list
        elif [ -f ios/Runner.xcodeproj ]; then
          xcodebuild -project ios/Runner.xcodeproj -list
        fi

    - name: Get Flutter dependencies
      run: |
        flutter pub get

    - name: Build Flutter iOS
      run: |
        flutter build ios --simulator --no-codesign

    - name: Install CocoaPods (if needed)
      run: |
        if [ -f "ios/Podfile" ]; then
          sudo gem install cocoapods
          pod install --project-directory=ios
        fi

    - name: Build App
      run: |
        WORKSPACE="ios/Runner.xcworkspace"
        if [ -f "$WORKSPACE" ]; then
          echo "Building workspace: $WORKSPACE with scheme: ${{ env.SCHEME }}"
          xcodebuild -workspace "$WORKSPACE" \
            -scheme "${{ env.SCHEME }}" \
            -configuration Debug \
            -destination "${{ env.DESTINATION }}" \
            -derivedDataPath DerivedData \
            build
        else
          PROJECT="ios/Runner.xcodeproj"
          echo "Building project: $PROJECT with scheme: ${{ env.SCHEME }}"
          xcodebuild -project "$PROJECT" \
            -scheme "${{ env.SCHEME }}" \
            -configuration Debug \
            -destination "${{ env.DESTINATION }}" \
            -derivedDataPath DerivedData \
            build
        fi

    - name: Package App
      run: |
        APP_PATH=$(find DerivedData -name "*.app" | head -1)
        if [ -n "$APP_PATH" ]; then
          echo "Found app at: $APP_PATH"
          APP_NAME=$(basename "$APP_PATH")
          cp -r "$APP_PATH" "./$APP_NAME"
          zip -r "${APP_NAME}.zip" "./$APP_NAME"
          echo "Created: ${APP_NAME}.zip"
        else
          echo "No .app file found!"
          exit 1
        fi

    - name: Upload App
      uses: actions/upload-artifact@v4
      with:
        name: iOS-App-Simulator-${{ github.sha }}
        path: "*.zip"
        retention-days: 30